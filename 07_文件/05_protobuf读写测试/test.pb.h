// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_test_2eproto_metadata_getter(int index);
class TestProto;
struct TestProtoDefaultTypeInternal;
extern TestProtoDefaultTypeInternal _TestProto_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TestProto* Arena::CreateMaybeMessage<::TestProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TestProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestProto) */ {
 public:
  inline TestProto() : TestProto(nullptr) {}
  virtual ~TestProto();
  explicit constexpr TestProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestProto(const TestProto& from);
  TestProto(TestProto&& from) noexcept
    : TestProto() {
    *this = ::std::move(from);
  }

  inline TestProto& operator=(const TestProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestProto& operator=(TestProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestProto* internal_default_instance() {
    return reinterpret_cast<const TestProto*>(
               &_TestProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestProto& a, TestProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TestProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestProto* New() const final {
    return CreateMaybeMessage<TestProto>(nullptr);
  }

  TestProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestProto& from);
  void MergeFrom(const TestProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestProto";
  }
  protected:
  explicit TestProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_test_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 2,
    kIFieldNumber = 1,
  };
  // repeated .TestProto t = 2;
  int t_size() const;
  private:
  int _internal_t_size() const;
  public:
  void clear_t();
  ::TestProto* mutable_t(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestProto >*
      mutable_t();
  private:
  const ::TestProto& _internal_t(int index) const;
  ::TestProto* _internal_add_t();
  public:
  const ::TestProto& t(int index) const;
  ::TestProto* add_t();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestProto >&
      t() const;

  // int32 i = 1;
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int32 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i() const;
  void _internal_set_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:TestProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestProto > t_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestProto

// int32 i = 1;
inline void TestProto::clear_i() {
  i_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto::_internal_i() const {
  return i_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TestProto::i() const {
  // @@protoc_insertion_point(field_get:TestProto.i)
  return _internal_i();
}
inline void TestProto::_internal_set_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  i_ = value;
}
inline void TestProto::set_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:TestProto.i)
}

// repeated .TestProto t = 2;
inline int TestProto::_internal_t_size() const {
  return t_.size();
}
inline int TestProto::t_size() const {
  return _internal_t_size();
}
inline void TestProto::clear_t() {
  t_.Clear();
}
inline ::TestProto* TestProto::mutable_t(int index) {
  // @@protoc_insertion_point(field_mutable:TestProto.t)
  return t_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestProto >*
TestProto::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:TestProto.t)
  return &t_;
}
inline const ::TestProto& TestProto::_internal_t(int index) const {
  return t_.Get(index);
}
inline const ::TestProto& TestProto::t(int index) const {
  // @@protoc_insertion_point(field_get:TestProto.t)
  return _internal_t(index);
}
inline ::TestProto* TestProto::_internal_add_t() {
  return t_.Add();
}
inline ::TestProto* TestProto::add_t() {
  // @@protoc_insertion_point(field_add:TestProto.t)
  return _internal_add_t();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TestProto >&
TestProto::t() const {
  // @@protoc_insertion_point(field_list:TestProto.t)
  return t_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_2eproto
